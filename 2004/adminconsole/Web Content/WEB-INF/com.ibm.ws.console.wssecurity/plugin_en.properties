# IBM Confidential OCO Source Material
# 5630-A36 (C) COPYRIGHT International Business Machines Corp. 2003
# The source code for this program is not published or otherwise divested
# of its trade secrets, irrespective of what has been deposited with the
# U.S. Copyright Office.
#
#==================================================================================================
#
# TRANSLATION / TRANSLATOR NOTES:
#
# Whenever an apostrophe is needed within this file, please do not double it. It has
# been determined that the code that uses this file expects only a single
# apostrophe, and should work properly when a single apostrophe is provided.
#
#==================================================================================================
#
# DEVELOPER NOTES:
#
# This file has been modified to follow the WebSphere Message Guidelines.
# For more information, visit:
#   http://seaux.raleigh.ibm.com/g11n/was/seae/45/messages/index.html
# or contact Dennis Hebert/Raleigh/IBM (hebert@us.ibm.com)
#
# cmvc_en_version_level=1.16.1.5,5,03/08/19,10:39:24
#
#CMVCPATHNAME ws/code/webui.wssecurity/src/wssecurity/WEB-INF/plugin.nlsprops
#ISMESSAGEFILE TRUE
#COMPONENTPREFIX SECG
#COMPONENTNAMEFOR SECG WebUI SecurityCenter

nav.wssecurity=Web Services
nav.wssecurity.trust.anchors=Trust Anchors
nav.wssecurity.certificate.stores=Certificate Store
nav.wssecurity.ldapcertificate.stores=LDAP Certificate Store
nav.wssecurity.collcertificate.stores=Collection Certificate Store
nav.wssecurity.key.locators=Key Locators
nav.wssecurity.id.evaluators=Trusted ID Evaluators
nav.wssecurity.login.mappings=Login Mappings

WSSecurity.displayName=Properties
WSSecurity.description=Additional properties for the configuration of default binding information

WSServerSecurity.displayName=Web Services: Default bindings for Web Services Security
WSServerSecurity.description=Specifies a list of default bindings for Web Services Security. You can override these default bindings in the binding files for a specific Web service.

WSServerBinding.displayName=Web Services: Server Security Bindings
WSServerBinding.description=Server-side binding configuration for Web Services Security.
WSClientBinding.displayName=Web Services: Client Security Bindings
WSClientBinding.description=Client-side binding configuration for Web Services Security.
WSBinding.service.displayName=Web service
WSBinding.port.displayName=Port
WSBinding.edit=Edit...

WSSecurity.property.displayName=Properties
WSSecurity.property.description=Additional properties for the configuration.
WSSecurity.property.name.displayName=Property Name
WSSecurity.property.name.description=Specifies the name of the property.
WSSecurity.property.value.displayName=Property Value
WSSecurity.property.value.description=Specifies the value of the property.

WSSecurity.nonceCacheTimeout.displayname=Nonce Cache Timeout
WSSecurity.nonceCacheTimeout.description=Specifies the time out value for the nonce cached on the server. Nonce is a randomly generated value.

TrustAnchor.displayName=Trust Anchors
TrustAnchor.description=Specifies a list of key store configurations that contain root trusted certificates. These configurations are used for certificate path validation of the incoming X.509-formatted security tokens. The key store must be created using the Development Kit keytool. Do not use the Key Management Utility as it will not create a key store with the expected format.
TrustAnchor.smallIcon=TrustAnchor.gif
TrustAnchor.largeIcon=TrustAnchor32X32.gif
TrustAnchor.name.displayName=Trust Anchor Name
TrustAnchor.name.description=Specifies the unique name used to identify a trust anchor.
TrustAnchor.keystorePwd.displayName=Key Store Password
TrustAnchor.keystorePwd.description=Specifies the password for the key store file.
TrustAnchor.keystorePath.displayName=Key Store Path
TrustAnchor.keystorePath.description=Specifies the location of the key store file.
TrustAnchor.keystoreType.displayName=Key Store Type
TrustAnchor.keystoreType.description=Specifies the type of key store file, which is either JKS or JCEKS.
TrustAnchor.keystoreType.JKS=JKS
TrustAnchor.keystoreType.JCEKS=JCEKS

LDAPCertStore.displayName=LDAP Certificate Store
LDAPCertStore.description=Specifies the LDAP server that contains the untrusted, intermediate certificate entries. This LDAP server is used as the certificate store for certificate path validation of incoming X.509-formatted security tokens.
LDAPCertStore.smallIcon=LDAPCertStore.gif
LDAPCertStore.largeIcon=LDAPCertStore32X32.gif
LDAPCertStore.name.displayName=Certificate Store Name
LDAPCertStore.name.description=Specifies the string label of the certificate store.
LDAPCertStore.provider.displayName=Certificate Store Provider
LDAPCertStore.provider.description=Specifies the provider name of the certificate store implementation.
LDAPCertStore.ldapServer.displayName=LDAP Server
LDAPCertStore.ldapServer.description=Specifies the host name of the LDAP server.
LDAPCertStore.ldapPort.displayName=LDAP Port
LDAPCertStore.ldapPort.description=Specifies the port number of the LDAP server.
LDAPCertStore.ldapProperties.displayName=LDAP Server Properties
LDAPCertStore.ldapProperties.description=Specifies additional properties for the LDAP server.

CollectionCertStore.displayName=Collection Certificate Store
CollectionCertStore.description=Specifies a list of untrusted, intermediate certificate files. This collection certificate store is used for certificate path validation of incoming X.509-formatted security tokens.
CollectionCertStore.smallIcon=LDAPCertStore.gif
CollectionCertStore.largeIcon=LDAPCertStore32X32.gif
CollectionCertStore.name.displayName=Certificate Store Name
CollectionCertStore.name.description=Specifies the unique name of the certificate store.
CollectionCertStore.provider.displayName=Certificate Store Provider
CollectionCertStore.provider.description=Specifies the provider name of the certificate store implementation.

X509Certificate.displayName=X.509 Certificates
X509Certificate.description=Specifies a list of X.509 certificates.
X509Certificate.smallIcon=X509Certificate.gif
X509Certificate.largeIcon=X509Certificate32X32.gif
X509Certificate.reference.displayName=X.509 Certificate Path
X509Certificate.reference.description=Specifies the path to the X.509 certificate file.

KeyLocator.displayName=Key Locators
KeyLocator.description=Specifies a list of key locator configurations that retrieve the key for signature and encryption. A key locator class can be customized to retrieve keys from other types of repositories.  The default implementation retrieves keys from a key store.
KeyLocator.smallIcon=KeyLocator.gif
KeyLocator.largeIcon=KeyLocator32X32.gif
KeyLocator.name.displayName=Key Locator Name
KeyLocator.name.description=Specifies the unique name used to identify the key locator definition.
KeyLocator.className.displayName=Key Locator Classname
KeyLocator.className.description=Specifies the name of the key locator implementation class. The key locator must implement the com.ibm.wsspi.wssecurity.config.KeyLocator interface.
KeyLocator.keystorePwd.displayName=Key Store Password
KeyLocator.keystorePwd.description=Specifies the password for the key store file. This is optional if the key locator does not use a key store.
KeyLocator.keystorePath.displayName=Key Store Path
KeyLocator.keystorePath.description=Specifies the path to the key store file. This is optional if the key locator does not use a key store.
KeyLocator.keystoreType.displayName=Key Store Type
KeyLocator.keystoreType.description=Specifies the type of key store file. This is optional if the key locator does not use a key store.
KeyLocator.keystoreType.JKS=JKS
KeyLocator.keystoreType.JCEKS=JCEKS

WSKey.displayName=Keys
WSKey.description=Specifies a list of key entries in the key store with string labels. Note: You do not need to list all the certificate entries as keys; instead, the distinguished name (DN) of the certificate is used as the search key.
WSKey.smallIcon=Key.gif
WSKey.largeIcon=Key32X32.gif
WSKey.name.displayName=Key Name
WSKey.name.description=Specifies the string label of the key. This name is used by the key locator to search for the key.
WSKey.alias.displayName=Key Alias
WSKey.alias.description=Specifies the alias of the key in the key store.
WSKey.keypass.displayName=Key Password
WSKey.keypass.description=Specifies the password for the key.

TrustedIDEvaluator.displayName=Trusted ID Evaluators
TrustedIDEvaluator.description=Specifies a list of trusted ID evaluators that determine whether the identity (ID)-asserting authority is trusted.
TrustedIDEvaluator.smallIcon=TrustedIDEvaluator.gif
TrustedIDEvaluator.largeIcon=TrustedIDEvaluator32X32.gif
TrustedIDEvaluator.name.displayName=Trusted ID Evaluator Name
TrustedIDEvaluator.name.description=Specifies the unique name to identify a trusted ID evaluator configuration.
TrustedIDEvaluator.className.displayName=Trusted ID Evaluator Classname
TrustedIDEvaluator.className.description=Specifies the name of the trusted ID evaluator implementation class. The trusted ID evaluator must implement the com.ibm.wsspi.wssecurity.id.TrustedIDEvaluator class.
TrustedIDEvaluator.none=None
TrustedIDEvaluator.existing=Existing Evaluator Definition
TrustedIDEvaluator.existing.select=Select Trusted ID Evaluator
TrustedIDEvaluator.specified=Binding Evaluator Definition

LoginMapping.displayName=Login Mappings
LoginMapping.description=Specifies a list of configurations for validating security tokens within incoming messages.
LoginMapping.smallIcon=LoginMapping.gif
LoginMapping.largeIcon=LoginMapping32X32.gif
LoginMapping.name.displayName=Login Mapping Name
LoginMapping.name.description=Specifies the string label of the login mapping.
LoginMapping.authMethod.displayName=Authentication Method
LoginMapping.authMethod.description=Specifies the method of authentication. You can use any string, but the string must match the <AuthMethod> element in the service-level configuration. The following four words are reserved and have special meanings: "BasicAuth": <UsernameToken> uses both a user name and a password; "IDAssertion": <UsernameToken> uses only a user name; "Signature": uses the distinguished name (DN) of the signer; and "LTPA": validates a token.
LoginMapping.configName.displayName=JAAS Configuration Name
LoginMapping.configName.description=Specifies the name of the Java Authentication and Authorization Service (JAAS) login configuration.
LoginMapping.tokenTypeURI.displayName=Token Type URI
LoginMapping.tokenTypeURI.description=Specifies the namespace URI, which denotes the type of the security token accepted. If binary security tokens are accepted, the value should denote the "valueType" attribute in <BinarySecurityToken> element. If XML tokens are accepted, the value should denote the top-level element name of the XML token. If the reserved words are specified in the "Authentication Method" field above, this field is ignored.
LoginMapping.tokenTypeName.displayName=Token Type Local Name
LoginMapping.tokenTypeName.description=Specifies the local name that denotes the type of the security token accepted. If binary security tokens are accepted, the value should denote the "valueType" attribute in <BinarySecurityToken> element. If XML tokens are accepted, the value should denote the top-level element name of the XML token. If the reserved words are specified in the "Authentication Method" field above, this field is ignored.
LoginMapping.callbackClassName.displayName=Callback Handler Factory Classname
LoginMapping.callbackClassName.description=Specifies the name of the callback handler factory implementation class. It must implement the com.ibm.wsspi.wssecurity.auth.callback.CallbackHandlerFactory class.
LoginMapping.callbackProperties.displayName=Callback Handler Factory Properties
LoginMapping.callbackProperties.description=Additional properties for the callback handler factory.
LoginMapping.makeSoapAvailable.displayName=Make SOAP Message Available
LoginMapping.makeSoapAvailable.description=description
LoginMapping.nonceMaxAge.displayName=Nonce Maximum Age
LoginMapping.nonceMaxAge.description=Specifies the time before the nonce time stamp expires. Nonce is a randomly generated value.
LoginMapping.nonceClockSkew.displayName=Nonce Clock Skew
LoginMapping.nonceClockSkew.description=Specifies the clock skew value to consider when WebSphere Application Server checks the freshness of the message. Nonce is a randomly generated value.

WSSecurity.validate=Validate configuration
WSSecurity.updateRuntime=Update runtime
WSSecurity.seconds=seconds

RequestReceiver.displayName=Request Receiver Binding
RequestReceiver.description=Specifies the binding configuration to receive request messages for Web Services Security.

ResponseSender.displayName=Response Sender Binding
ResponseSender.description=Specifies the binding configuration to send response messages for Web Services Security.

RequestSender.displayName=Request Sender Binding
RequestSender.description=Specifies the binding configuration to send request messages for Web Services Security.

ResponseReceiver.displayName=Response Receiver Binding
ResponseReceiver.description=Specifies the binding configuration to receive response messages for Web Services Security.

SigningInfo.displayName=Signing Information
SigningInfo.description=Specifies the configuration for the signing parameters. These parameters also can be used for X.509 certificate validation when "Authentication Method" is "IDAssertion" and "ID Type" is "X509Certificate" in the server-level configuration. In such cases, you must fill-in the "Certificate Path" fields only.
SigningInfo.smallIcon=SigningInformation.gif
SigningInfo.largeIcon=SigningInformation32X32.gif
SigningInfo.method.displayName=Signature Method
SigningInfo.method.description=Specifies the algorithm URI of the signature method.
SigningInfo.canonMethod.displayName=Canonicalization Method
SigningInfo.canonMethod.description=Specifies the algorithm URI of the canonicalization method.
SigningInfo.digestMethod.displayName=Digest Method
SigningInfo.digestMethod.description=Specifies the algorithm URI of the digest method.
SigningInfo.signingKey.displayName=Signing Key
SigningInfo.signingKey.description=Specifies the key information that is used for signing. These fields are ignored in receiver-side configuration.
SigningInfo.signingKeyName.displayName=Key Name
SigningInfo.signingKeyName.description=Specifies the string label of the key. This name is resolved to the actual key by the specified key locator.
SigningInfo.signingKeyRef.displayName=Key Locator Reference
SigningInfo.signingKeyRef.description=Specifies the reference to the name of the key locator.
SigningInfo.certificatePath.displayName=Certificate Path
SigningInfo.certificatePath.description=Specifies the settings for the certificate path validation. When "Trust Any" is turned on, this validation is skipped and all the incoming certificates are trusted. These fields are ignored in sender-side configuration.
SigningInfo.none=None
SigningInfo.any=Trust Any
SigningInfo.trustAnchor=Trust Anchor
SigningInfo.trustAnchor.displayName=Trust Anchor
SigningInfo.trustAnchor.description=Specifies the reference to the name of the trust anchor.
SigningInfo.certificateStore.displayName=Certificate Store
SigningInfo.certificateStore.description=Specifies the reference to the name of the certificate store.
SigningInfo.specified=Dedicated Signing Information

EncryptionInfo.displayName=Encryption Information
EncryptionInfo.description=Specifies the configuration for the encrypting and decrypting parameters.
EncryptionInfo.smallIcon=EncryptionInfo.gif
EncryptionInfo.largeIcon=EncryptionInfo32X32.gif
EncryptionInfo.name.displayName=Encryption Information Name
EncryptionInfo.name.description=Specifies the unique name of the encryption information.
EncryptionInfo.keyReference.displayName=Key Locator Reference
EncryptionInfo.keyReference.description=Specifies the reference to the name of the key locator to be used.
EncryptionInfo.keyName.displayName=Encryption Key Name
EncryptionInfo.keyName.description=Specifies the name of the key. This name is resolved to the actual key by the specified key locator.
EncryptionInfo.keyAlgorithm.displayName=Key Encryption Algorithm
EncryptionInfo.keyAlgorithm.description=Specifies the algorithm URI of the key encryption method.
EncryptionInfo.dataAlgorithm.displayName=Data Encryption Algorithm
EncryptionInfo.dataAlgorithm.description=Specifies the algorithm URI of the data encryption method.
EncryptionInfo.none=None
EncryptionInfo.specified=Dedicated Encryption Information

LoginBinding.displayName=Login Binding
LoginBinding.description=Specifies the configuration for sending the security tokens within the messages.
LoginBinding.smallIcon=LoginBinding.gif
LoginBinding.largeIcon=LoginBinding32X32.gif
LoginBinding.dedicated.description=This is used by the sender to generate security tokens in the message. There are 4 predefined authentication methods: "BasicAuth": generates <UsernameToken> with both a user name and a password; "IDAssertion": generates <UsernameToken> uses a user name only. "Signature": uses the distinguished name (DN) of the signer. "LTPA": uses the <BinarySecurityToken> from the invocation credential or generate the token from Basic Auth data. You may also define a custom authentication method.
LoginBinding.name.displayName=Login Binding Name
LoginBinding.name.description=String label of the login binding.
LoginBinding.authMethod.displayName=Authentication Method
LoginBinding.authMethod.description=Specifies the method of authentication. You can use any string, but the string must match the <AuthMethod> element in the service-level configuration. The following four words are reserved and have special meanings; "BasicAuth": <UsernameToken> uses both a user name and a password; "IDAssertion": <UsernameToken> uses a user name only; "Signature": uses the distinguished name (DN) of the signer; and "LTPA": validates a token.
LoginBinding.authMethod.basicAuth=Basic Auth
LoginBinding.authMethod.idAssertion=ID Assertion
LoginBinding.authMethod.signature=Signature
LoginBinding.callbackHandler.displayName=Callback Handler
LoginBinding.callbackHandler.description=Specifies the name of the callback handler implementation class. It must implement javax.security.auth.callback.CallbackHandler and must have a constructor whose signature is (String defaultId, char[] defaultPass, java.util.Map properties).
LoginBinding.tokenTypeURI.displayName=Token Type URI
LoginBinding.tokenTypeURI.description=Specifies the namespace URI that denotes the type of the security token accepted. If binary security tokens are accepted, the value should denote the "valueType" attribute in <BinarySecurityToken> element. If XML tokens are accepted, the value should denote the top-level element name of the XML token. If the reserved words are specified in the "Authentication Method" field above, this field is ignored.
LoginBinding.tokenTypeName.displayName=Token Type Local Name
LoginBinding.tokenTypeName.description=Specifies the local name that denotes the type of the security token accepted. If binary security tokens are accepted, the value should denote the "valueType" attribute in <BinarySecurityToken> element. If XML tokens are accepted, the value should denote the top-level element name of the XML token. If the reserved words are specified in the "Authentication Method" field above, this field is ignored.
LoginBinding.basicAuthID.displayName=Basic Auth User ID
LoginBinding.basicAuthID.description=Specifies the default user ID, which is passed to the constructor of the callback handler specified previously.
LoginBinding.basicAuthPwd.displayName=Basic Auth Password
LoginBinding.basicAuthPwd.description=Specifies the default password, which is passed to the constructor of the callback handler specified previously.
LoginBinding.none=None
LoginBinding.specified=Dedicated Login Binding

WSSecurity.viewServerDD.displayName=View Web Services Server Deployment Descriptor Extension
WSSecurity.viewServerDD.description=View the extension to the Web Services Server Deployment Descriptor
WSSecurity.viewClientDD.displayName=View Web Services Client Deployment Descriptor Extension
WSSecurity.viewClientDD.description=View the extension to the Web Services Client Deployment Descriptor
WSSecurity.ddExt.displayName=Deployment Descriptor Extension

WSSecurityUtil.errorCreateResource=An exception occurred creating a new ws-security.xml file and wssecurity extent in context {0}
wssecurity.both.tokenValueType=If you use the Token Value Type, you must specify the Token Type URI and the Token Type Local Name.
wssecurity.loginBinding.rqdFields=An authentication method and a callback handler are required.
wssecurity.loginBinding.authRqdFields=If you use BasicAuth, you must specify a user ID and a password.
wssecurity.trustedIDEvaluator.rqdFields=The Trusted ID Evaluator Name and the Trusted ID Evaluator Classname are required.
wssecurity.trustedIDEvaluator.rqdExisting=Existing Evaluator Definition is required.
wssecurity.encryptionInfo.rqdFields=The Encryption Information Name, Key Locator Reference, and Data Encryption Algorithm are required.
wssecurity.signingInfo.rqdFields=A Signature Method is required.
wssecurity.signingInfo.keyOrPath=You must specify either Signing Key information or Certificate Path information, but not both.
wssecurity.signingInfo.trustAny=If "Trust Anchor" is selected, you must specify the Trust Anchor and the Certificate Store.
wssecurity.signingInfo.signingKey=If a Key Name is specified, you must specify the Key Locator Reference.
wssecurity.both.keyLocator=If you use a key locator, you must specify the Key Name and the Key Locator Reference.
wssecurity.collectionCertStore.rqdX509=A Collection Certificate Store must include at least one X.509 certificate.
wssecurity.warn.appmgmt=Your application might have Web Services Security enabled. If Web Services Security is enabled, go to the Enterprise Application Management panels (found by clicking Applications > Enterprise Applications) to configure the binding information for Web Services Security. The binding information for Web Services Security is not collected during application deployment. If the binding information is not properly configured, your application might not start properly or might not be usable.
wssecurity.duplicate.trustAnchor=A Trust Anchor with this name already exists. The Trust Anchor name must be unique.
wssecurity.duplicate.collectionCertStore=A Collection Certificate Store with this name already exists. The Collection Certificate Store name must be unique.
wssecurity.duplicate.keyLocator=A Key Locator with this name already exists. The Key Locator name must be unique.
wssecurity.duplicate.trustedIDEvaluator=A Trusted ID Evaluator with this name already exists. The Trusted ID Evaluator name must be unique.
wssecurity.duplicate.loginMapping=A Login Mapping with this authentication method already exists. The Login Mapping authentication method must be unique.
wssecurity.duplicate.encryptionInfo=An Encryption Information with this name already exists. The Encryption Information name must be unique.
wssecurity.validate.binding.failed=Validation of the binding information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.validate.server.failed=Validation of the server binding information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.validate.client.failed=Validation of the client binding information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.validate.responseSender=Validation of the Response Sender information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.validate.responseReceiver=Validation of the Response Receiver information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.validate.requestSender=Validation of the Request Sender information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.validate.requestReceiver=Validation of the Request Receiver information failed. You must examine the binding information for inconsistencies in the Web Services Security deployment descriptors.
wssecurity.updateRuntime.failed=The run time failed to update the binding configuration information from the repository. Please verify the configuration settings as an invalid configuration could cause the update to fail. Please try restarting the server for the changes to take effect.
wssecurity.nonce.not.supported=Nonce is not supported for authentication methods other than <i>BasicAuth</i>.
wssecurity.all.required=All fields are required.

http.basicauth.title.displayName=HTTP Basic Authentication
http.basicauth.title.description=The basic authentication for the HTTP transport.
http.basicauthid.displayName=Basic Authentication ID
http.basicauthid.description=Specifies the user ID for HTTP basic authentication for this port. HTTP SSL basic authentication can be configured by enabling HTTP SSL Configuration also.
http.basicauthpwd.displayName=Basic Authentication Password
http.basicauthpwd.description=Specifies the password for HTTP basic authentication for this port.
http.sslconfig.title.displayName=HTTP SSL Configuration
http.sslconfig.title.description=The alias of the SSL Configuration for the HTTP transport.
http.sslenabled.displayName=HTTP SSL Enabled
http.sslenabled.description=Whether secure socket communications is enabled for the HTTP transport for this port. When enabled, the HTTP SSL Configuration setting is used.
http.sslconfig.displayName=HTTP SSL Configuration
http.sslconfig.description=The alias of the SSL Configuration to use with the HTTP transport for this port.  This is used if HTTP SSL is enabled.

# The following error messages are accessed through Tr.error().
# Note that the SECGxxxx numbers are used to correlate the user visible messages (e.g. Tr.warning, Tr.error,
# Tr.audit) with an Explanation & User Response message that is documented in a Message Reference guide.
# Do not modify the existing SECGxxxx numbers.  See http://hany.austin.ibm.com/messages/index.html
# for info on how to add new messages.
# Every message you add to this section should also include an Explanation & a User Response.
# -------------------------------------------------------------------------------------------------
wssecurity.file.load.exception=SECG1000E: An exception occurred loading the resource {0}: {1}.
wssecurity.file.load.exception.explanation=No ws-security.xml file was found in the resource set.
wssecurity.file.load.exception.useraction=CMSG0002
# -------------------------------------------------------------------------------------------------
wssecurity.utils.nowssec=SECG1001W: The ws-security.xml file was not available in the context {0}.
wssecurity.utils.nowssec.explanation=No ws-security.xml file was found in the resource context.
wssecurity.utils.nowssec.useraction=CMSG0002
# -------------------------------------------------------------------------------------------------

# End of Tr.error() message section
# -------------------------------------------------------------------------------------------------
